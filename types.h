/**
 * @file types.h
 * @author yangzs
 * @brief 
 * @version 0.1
 * 
 * @copyright Copyright (c) 2021
 * 
 */
#pragma once
#include <glad/glad.h>

typedef unsigned int Flags;

enum DataType
{
	DATA_TYPE_BYTE = 0,
	DATA_TYPE_UNSIGNED_BYTE,
	DATA_TYPE_SHORT,
	DATA_TYPE_UNSIGNED_SHORT,
	DATA_TYPE_INT,
	DATA_TYPE_UNSIGNED_INT,
	DATA_TYPE_FLOAT,
	DATA_TYPE_FLOAT_HALF,
	DATA_TYPE_DOUBLE,
	DATA_TYPE_INT_2_10_10_10_REV,
	DATA_TYPE_UNSIGNED_INT_2_10_10_10_REV,
	DATA_TYPE_UNSIGNED_INT_10F_11F_11F_REV
};

enum ShaderBinaryFormat
{
	SHADER_BINARY_FORMAT_SPIR_V = 0
};

enum ShaderStageFlagBits
{
	SHADER_STAGE_VERTEX_BIT = 0x00000001,
	SHADER_STAGE_FRAGMENT_BIT = 0x00000002,
	SHADER_STAGE_GEOMETRY_BIT = 0x00000004,
	SHADER_STAGE_TESS_CONTROL_BIT = 0x00000008,
	SHADER_STAGE_TESS_EVALUATION_BIT = 0x00000010,
	SHADER_STAGE_COMPUTE_BIT = 0x00000020,
	SHADER_STAGE_ALL_BITS = 0xFFFFFFFF,
};
using ShaderStageFlags = Flags;

enum ProgramInterface
{
	PROGRAME_INTERFACE_UNIFORM,
	PROGRAME_INTERFACE_UNIFORM_BLOCK,
	PROGRAME_INTERFACE_ATOMIC_COUNTER_BUFFER,
	PROGRAME_INTERFACE_PROGRAM_INPUT,
	PROGRAME_INTERFACE_PROGRAM_OUTPUT,
	PROGRAME_INTERFACE_VERTEX_SUBROUTINE,
	PROGRAME_INTERFACE_TESS_CONTROL_SUBROUTINE,
	PROGRAME_INTERFACE_TESS_EVALUATION_SUBROUTINE,
	PROGRAME_INTERFACE_GEOMETRY_SUBROUTINE,
	PROGRAME_INTERFACE_FRAGMENT_SUBROUTINE,
	PROGRAME_INTERFACE_COMPUTE_SUBROUTINE,
	PROGRAME_INTERFACE_VERTEX_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_TESS_CONTROL_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_TESS_EVALUATION_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_GEOMETRY_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_FRAGMENT_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_COMPUTE_SUBROUTINE_UNIFORM,
	PROGRAME_INTERFACE_TRANSFORM_FEEDBACK_VARYING,
	PROGRAME_INTERFACE_TRANSFORM_FEEDBACK_BUFFER,
	PROGRAME_INTERFACE_BUFFER_VARIABLE,
	PROGRAME_INTERFACE_SHADER_STORAGE_BLOCK
};

enum BufferBindTarget
{
	BUFFER_TYPE_ARRAY = 0, //vertex
	BUFFER_TYPE_ATOMIC_COUNTER,
	BUFFER_TYPE_COPY_READ,	//transfer src
	BUFFER_TYPE_COPY_WRITE, //transfer dst
	BUFFER_TYPE_DISPATCH_INDIRECT,
	BUFFER_TYPE_DRAW_INDIRECT, //indirect
	BUFFER_TYPE_ELEMENT_ARRAY, //index
	BUFFER_TYPE_PARAMETER,
	BUFFER_TYPE_PIXEL_PACK,
	BUFFER_TYPE_PIXEL_UNPACK,
	BUFFER_TYPE_QUERY,
	BUFFER_TYPE_SHADER_STORAGE, //storage
	BUFFER_TYPE_TEXTURE,
	BUFFER_TYPE_TRANSFORM_FEEDBACK, //transform feedback
	BUFFER_TYPE_UNIFORM,			//uniform
};
enum BufferStorageFlagBits
{
	BUFFER_STORAGE_MAP_READ_BIT = 0x1,
	BUFFER_STORAGE_MAP_WRITE_BIT = 0x2,
	BUFFER_STORAGE_MAP_PERSISTENT_BIT = 0x40,
	BUFFER_STORAGE_MAP_COHERENT_BIT = 0x80,
	BUFFER_STORAGE_DYNAMIC_STORAGE_BIT = 0x100,
	BUFFER_STORAGE_CLIENT_STORAGE_BIT = 0x200,
};
using BufferStorageFlags = Flags;

enum BufferMutableStorageUsage
{
	BUFFER_MUTABLE_STORAGE_STREAM_DRAW = 0,
	BUFFER_MUTABLE_STORAGE_STREAM_READ,
	BUFFER_MUTABLE_STORAGE_STREAM_COPY,
	BUFFER_MUTABLE_STORAGE_DYNAMIC_DRAW,
	BUFFER_MUTABLE_STORAGE_DYNAMIC_READ,
	BUFFER_MUTABLE_STORAGE_DYNAMIC_COPY,
	BUFFER_MUTABLE_STORAGE_STATIC_DRAW,
	BUFFER_MUTABLE_STORAGE_STATIC_READ,
	BUFFER_MUTABLE_STORAGE_STATIC_COPY,
};

enum BufferMapFlagBits
{
	BUFFER_MAP_READ_BIT = 0x1,
	BUFFER_MAP_WRITE_BIT = 0x2,
	BUFFER_MAP_INVALIDATE_RANGE_BIT = 0x4,
	BUFFER_MAP_INVALIDATE_BUFFER_BIT = 0x8,
	BUFFER_MAP_FLUSH_EXPLICIT_BIT = 0x10,
	BUFFER_MAP_UNSYNCHRONIZED_BIT = 0x20,
	BUFFER_MAP_PERSISTENT_BIT = 0x40,
	BUFFER_MAP_COHERENT_BIT = 0x80,
};
typedef Flags BufferMapFlags;

enum MemoryBarrierFlagBits
{
	MEMORY_BARRIER_VERTEX_ATTRIB_ARRAY_BIT = 0x00000001,
	MEMORY_BARRIER_ELEMENT_ARRAY_BIT = 0x00000002,
	MEMORY_BARRIER_UNIFORM_BIT = 0x00000004,
	MEMORY_BARRIER_TEXTURE_FETCH_BIT = 0x00000008,
	MEMORY_BARRIER_SHADER_IMAGE_ACCESS_BIT = 0x00000020,
	MEMORY_BARRIER_COMMAND_BIT = 0x00000040,
	MEMORY_BARRIER_PIXEL_BUFFER_BIT = 0x00000080,
	MEMORY_BARRIER_TEXTURE_UPDATE_BIT = 0x00000100,
	MEMORY_BARRIER_BUFFER_UPDATE_BIT = 0x00000200,
	MEMORY_BARRIER_FRAMEBUFFER_BIT = 0x00000400,
	MEMORY_BARRIER_TRANSFORM_FEEDBACK_BIT = 0x00000800,
	MEMORY_BARRIER_ATOMIC_COUNTER_BIT = 0x00001000,
	MEMORY_BARRIER_SHADER_STORAGE_BIT = 0x00002000,
	MEMORY_BARRIER_CLIENT_MAPPED_BUFFER_BIT = 0x00004000,
	MEMORY_BARRIER_QUERY_BUFFER_BIT = 0x00008000,
	MEMORY_BARRIER_ALL_BITS = 0xFFFFFFFF,
};
typedef Flags MemoryBarrierFlags;

enum DescriptorType
{
	DESCRIPTOR_TYPE_SAMPLER = 0,				//sampler (vulkan)
	DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1, //sampler2D
	DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,			//texture2D (vulkan)
	DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,			//image2D
	DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,	//samplerbuffer	(no sampler,seems same as imagebuffer)
	DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,	//imagebuffer
	DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,			//uniform block
	DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,			//buffer block
	DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
	DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
	DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
};

enum BufferCreateFlagBits
{
	BUFFER_CREATE_MUTABLE_FORMAT_BIT = 0x1,
};
typedef Flags BufferCreateFlags;

enum ImageCreateFlagBits
{
	IMAGE_CREAT_MUTABLE_FORMAT_BIT = 0x1,
};
typedef Flags ImageCreateFlags;

enum ImageType
{
	IMAGE_TYPE_1D = 0,
	IMAGE_TYPE_2D,
	IMAGE_TYPE_3D,
};

enum ImageViewType
{
	IMAGE_VIEW_TYPE_1D = 0,
	IMAGE_VIEW_TYPE_2D = 1,
	IMAGE_VIEW_TYPE_3D = 2,
	IMAGE_VIEW_TYPE_CUBE = 3,
	IMAGE_VIEW_TYPE_1D_ARRAY = 4,
	IMAGE_VIEW_TYPE_2D_ARRAY = 5,
	IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
};

enum ImageAspectFlagBits
{
	IMAGE_ASPECT_COLOR_BIT = 0x00000001,
	IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
	IMAGE_ASPECT_STENCIL_BIT = 0x00000004
};
typedef Flags ImageAspectFlags;

enum SampleCountFlagBits
{
	SAMPLE_COUNT_1_BIT = 0x00000001,
	SAMPLE_COUNT_2_BIT = 0x00000002,
	SAMPLE_COUNT_4_BIT = 0x00000004,
	SAMPLE_COUNT_8_BIT = 0x00000008,
	SAMPLE_COUNT_16_BIT = 0x00000010,
	SAMPLE_COUNT_32_BIT = 0x00000020,
	SAMPLE_COUNT_64_BIT = 0x00000040,
};

enum ImageTiling
{
	IMAGE_TILING_OPTIMAL,
	IMAGE_TILING_LINEAR,
};

enum Filter
{
	FILTER_NEAREST = 0,
	FILTER_LINEAR,
};

enum SamplerMipmapMode
{
	SAMPLER_MIPMAP_MODE_NEAREST = 0,
	SAMPLER_MIPMAP_MODE_LINEAR = 0,
};
enum SamplerWrapMode
{
	SAMPLER_WRAP_MODE_REPEAT = 0,
	SAMPLER_WRAP_MODE_MIRRORED_REPEAT,
	SAMPLER_WRAP_MODE_CLAMP_TO_EDGE,
	SAMPLER_WRAP_MODE_CLAMP_TO_BORDER,
};
enum CompareOp
{
	COMPARE_OP_NEVER = 0,
	COMPARE_OP_LESS = 1,
	COMPARE_OP_EQUAL = 2,
	COMPARE_OP_LESS_OR_EQUAL = 3,
	COMPARE_OP_GREATER = 4,
	COMPARE_OP_NOT_EQUAL = 5,
	COMPARE_OP_GREATER_OR_EQUAL = 6,
	COMPARE_OP_ALWAYS = 7,
};
enum ImageLayout
{
	IMAGE_LAYOUT_NONE = 0,
	IMAGE_LAYOUT_GENERAL_EXT,
	IMAGE_LAYOUT_COLOR_ATTACHMENT_EXT,
	IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT,
	IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT,
	IMAGE_LAYOUT_SHADER_READ_ONLY_EXT,
	IMAGE_LAYOUT_TRANSFER_SRC_EXT,
	IMAGE_LAYOUT_TRANSFER_DST_EXT,
	IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT,
	IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT,
};
enum ComponentSwizzle
{
	COMPONENT_SWIZZLE_IDENTITY = 0,
	COMPONENT_SWIZZLE_ZERO = 1,
	COMPONENT_SWIZZLE_ONE = 2,
	COMPONENT_SWIZZLE_R = 3,
	COMPONENT_SWIZZLE_G = 4,
	COMPONENT_SWIZZLE_B = 5,
	COMPONENT_SWIZZLE_A = 6,
};

GLenum Map(DataType dataType);
GLenum Map(BufferBindTarget target);
GLenum Map(ShaderBinaryFormat shaderBinaryFormat);
GLenum Map(ImageType imageType, bool multisample);
GLenum Map(SamplerWrapMode wrapMode);
GLenum Map(CompareOp wrapMode);
GLenum Map(Filter filter);
GLenum Map(ImageTiling tiling);
GLenum Map(ImageLayout imageLayout);
GLenum Map(BufferMutableStorageUsage usage);
GLenum Map(ImageViewType viewType);
